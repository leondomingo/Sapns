#
# sapns - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory,
# and generally should not be modified by end users.

[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 8081

[sa_auth]
cookie_secret = 04e6453b-f5d7-4f7d-868e-a9f338760d9a

[app:main]
use = egg:sapns
full_stack = true
#lang = ru
cache_dir = %(here)s/data
beaker.session.key = sapns
beaker.session.secret = 04e6453b-f5d7-4f7d-868e-a9f338760d9a

# Sapns settings
pg_path = /usr/bin
formats.date = %m/%d/%Y
formats.time = %H:%M
grid.date_format = %m/%d/%Y
grid.time_format = %H:%M
grid.datetime_format = %m/%d/%Y %H:%M
grid.true_const = Yes
grid.false_const = No

# JavaScript options
js.date_format = mm/dd/yy
js.date_format2 = mm/dd/yyyy
js.date_format2_long = dddd, mmmm dd yyyy
# 0-sunday, 1-monday, ..., 6-saturday
js.first_day = 1

# TODO: Application's settings here
app.name = Sapns
app.subtitle = Web Information System
app.company_url = http://www.sapns.org
#app.root_folder = 

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

# pick the form for your database
# %(here) may include a ':' character on Windows environments; this can
# invalidate the URI when specifying a SQLite db via path name
# sqlalchemy.url=postgresql://username:password@hostname:port/databasename
sqlalchemy.url=postgresql://postgres:pswd@localhost/sapns

#echo shouldn't be used together with the logging module.
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html

#turn this setting to "min" if you would like tw to produce minified
#javascript files (if your library supports that)
toscawidgets.framework.resource_variant=debug

[loggers]
keys = root, sapns, sqlalchemy, auth

[handlers]
keys = console

[formatters]
keys = generic

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = INFO
handlers = console

[logger_sapns]
level = DEBUG
handlers =
qualname = sapns

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)


# A logger for authentication, identification and authorization -- this is
# repoze.who and repoze.what:
[logger_auth]
level = WARN
handlers =
qualname = auth

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
